# -*- coding: utf-8 -*-
"""code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GZtmegsSJC_CTAmMhpuemtbEI2QEpPEg
"""

!pip install pymupdf

from google.colab import files
uploaded = files.upload()

import fitz  # PyMuPDF - A Python library to work with PDF files

# Open the PDF file using PyMuPDF
doc = fitz.open("Form ADT-1-29092023_signed.pdf")

# Initialize an empty string to store extracted text
text = ""

# Loop through each page of the PDF
for page in doc:
    # Extract text from the current page and append it to the text variable
    text += page.get_text()

# Print the first 2000 characters of the extracted text to check the output
print(text[:2000])

import re
import json

# Sample extracted text (simulating PDF text extraction output)
text = """
U74999KA2016PTC095981
ALUPA FOODS PRIVATE LIMITED
DHANYALAXMI RICE MILL,
5-110A, PUTTUR,
UDUPI
Udupi
Karnataka
576105
mail@alupafoods.in
1
Appointment/Re-appointment in AGM
AABFM8893Q
MALLYA & MALLYA
001955S
29/2, 1st Floor, Parijatha Complex
Race Course Road
Bangalore
Karnataka-KA
IN
560001
mallyaandmallya@gmail.com
01/04/2022
31/03/2027
5
"""

# Clean and split the text into individual non-empty lines
lines = [line.strip() for line in text.strip().split("\n") if line.strip()]

# Create a structured dictionary from the line-by-line text using indexing
data = {
    "cin": lines[0],  # Corporate Identification Number
    "company_name": lines[1],  # Name of the company
    "registered_office": ", ".join(lines[2:7]),  # Registered address (multiple lines)
    "company_email": lines[7],  # Official company email
    "number_of_auditors": lines[8],  # Number of auditors appointed
    "appointment_type": lines[9],  # Appointment type (e.g., in AGM)
    "auditor_pan": lines[10],  # PAN number of the auditor
    "auditor_name": lines[11],  # Name of the audit firm or auditor
    "auditor_frn_or_membership": lines[12],  # FRN (Firm Registration No.) or Membership ID
    "auditor_address": ", ".join(lines[13:15]),  # Address line of the auditor
    "auditor_city": lines[15],  # Auditor's city
    "auditor_state": lines[16],  # Auditor's state
    "auditor_country": lines[17],  # Auditor's country
    "auditor_pin": lines[18],  # Auditor's postal/ZIP code
    "auditor_email": lines[19],  # Auditor's email
    "appointment_from": lines[20],  # Appointment start date
    "appointment_to": lines[21],  # Appointment end date
    "financial_years": lines[22]  # Number of financial years covered by the appointment
}

# Save the structured data to a JSON file
with open("output.json", "w") as f:
    json.dump(data, f, indent=2)

# Also print the JSON data to the console in a readable format
print(json.dumps(data, indent=2))

# Open (or create) a file named 'output.json' in write mode and save the dictionary as a JSON with indentation
with open("output.json", "w") as f:
    json.dump(data, f, indent=2)

{
  "company_name": "ALUPA FOODS PRIVATE LIMITED",
  "cin": "U74999KA2016PTC095981",
  "auditor_name": "MALLYA & MALLYA",
  "appointment_from": "01/04/2022",
  "appointment_to": "31/03/2027",
  "appointment_type": "Appointment/Re-appointment in AGM"
}

# JSON Data Extracted (manually or from earlier steps)
data = {
    "company_name": "ALUPA FOODS PRIVATE LIMITED",               # Name of the company
    "cin": "U74999KA2016PTC095981",                              # Corporate Identification Number
    "auditor_name": "MALLYA & MALLYA",                           # Name of the appointed auditor
    "appointment_from": "01/04/2022",                            # Appointment start date
    "appointment_to": "31/03/2027",                              # Appointment end date
    "appointment_type": "Appointment/Re-appointment in AGM"      # Type of appointment
}

#  Function to generate a natural language summary from the extracted data
def generate_summary(data):
    summary = (
        f"{data['company_name']} (CIN: {data['cin']}) has appointed "
        f"{data['auditor_name']} as its statutory auditor. "
        f"The appointment is effective from {data['appointment_from']} to {data['appointment_to']}. "
        f"This appointment was made through an {data['appointment_type']}."
    )
    return summary

#  Generate the summary using the function
summary_text = generate_summary(data)

#  Print the generated summary
print(summary_text)